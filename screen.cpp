#include "screen.h"

#include <QPainter>
#include <qmath.h>
#include <QDebug>
#include <QTimer>
#include <QMap>

const QMap<Screen::Color, QColor> colorMap(
	std::map<Screen::Color, QColor>({
		{ Screen::Black,	Qt::black },
		{ Screen::Red,		Qt::red },
		{ Screen::Green,	Qt::green },
		{ Screen::Blue,		Qt::blue },
		{ Screen::Cyan,		Qt::cyan },
		{ Screen::Magenta,	Qt::magenta },
		{ Screen::Yellow,	Qt::yellow },
		{ Screen::White,	Qt::white }
	}
));

static int cols = 32;
const int rows = 12;
static int charWidth = 6;
static int charHeight = 8;
static int scale = 2;

const unsigned char pixelFont[] =
{
		//32 Space
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		//33 Exclamation !
		0b01000000,
		0b01000000,
		0b01000000,
		0b01000000,
		0b01000000,
		0b00000000,
		0b01000000,
		0b00000000,
		//34 Quotes "
		0b01010000,
		0b01010000,
		0b01010000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		//35 Number #
		0b00000000,
		0b00000000,
		0b01010000,
		0b11111000,
		0b01010000,
		0b11111000,
		0b01010000,
		0b00000000,
		//36 Dollars $
		0b00100000,
		0b01110000,
		0b10100000,
		0b01110000,
		0b00101000,
		0b01110000,
		0b00100000,
		0b00000000,
		//37 Percent %
		0b00000000,
		0b11001000,
		0b11010000,
		0b00100000,
		0b01011000,
		0b10011000,
		0b00000000,
		0b00000000,
		//38 Ampersand &
		0b00100000,
		0b01010000,
		0b10000000,
		0b01000000,
		0b10101000,
		0b10010000,
		0b01101000,
		0b00000000,
		//39 Single Quote '
		0b01000000,
		0b01000000,
		0b01000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		//40 Left Parenthesis (
		0b00010000,
		0b00100000,
		0b01000000,
		0b01000000,
		0b01000000,
		0b00100000,
		0b00010000,
		0b00000000,
		//41 Right Parenthesis )
		0b01000000,
		0b00100000,
		0b00010000,
		0b00010000,
		0b00010000,
		0b00100000,
		0b01000000,
		0b00000000,
		//42 Star *
		0b00010000,
		0b00111000,
		0b00010000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		//43 Plus +
		0b00000000,
		0b00100000,
		0b00100000,
		0b11111000,
		0b00100000,
		0b00100000,
		0b00000000,
		0b00000000,
		//44 Comma ,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00010000,
		0b00010000,
		0b00000000,
		//45 Minus -
		0b00000000,
		0b00000000,
		0b00000000,
		0b11111000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		//46 Period .
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00010000,
		0b00000000,
		0b00000000,
		// 47 Backslash /
		0b00000000,
		0b00001000,
		0b00010000,
		0b00100000,
		0b01000000,
		0b10000000,
		0b00000000,
		0b00000000,
		// 48 Zero
		0b01110000,
		0b10001000,
		0b10101000,
		0b10101000,
		0b10001000,
		0b01110000,
		0b00000000,
		0b00000000,
		//49 One
		0b00100000,
		0b01100000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b01110000,
		0b00000000,
		0b00000000,
		//50 two
		0b01110000,
		0b10001000,
		0b00010000,
		0b00100000,
		0b01000000,
		0b11111000,
		0b00000000,
		0b00000000,
		 //51 Three
		0b11111000,
		0b00010000,
		0b00100000,
		0b00010000,
		0b10001000,
		0b01110000,
		0b00000000,
		0b00000000,
		//52 Four
		0b10010000,
		0b10010000,
		0b10010000,
		0b11111000,
		0b00010000,
		0b00010000,
		0b00000000,
		0b00000000,
		//53 Five
		0b11111000,
		0b10000000,
		0b11110000,
		0b00001000,
		0b10001000,
		0b01110000,
		0b00000000,
		0b00000000,
		//54 Six
		0b01110000,
		0b10000000,
		0b11110000,
		0b10001000,
		0b10001000,
		0b01110000,
		0b00000000,
		0b00000000,
		//55 Seven
		0b11111000,
		0b00001000,
		0b00010000,
		0b00100000,
		0b01000000,
		0b10000000,
		0b00000000,
		0b00000000,
		//56 Eight
		0b01110000,
		0b10001000,
		0b01110000,
		0b10001000,
		0b10001000,
		0b01110000,
		0b00000000,
		0b00000000,
		//57 Nine
		0b01110000,
		0b10001000,
		0b10001000,
		0b01111000,
		0b00001000,
		0b01110000,
		0b00000000,
		0b00000000,
		//58 :
		0b00000000,
		0b00000000,
		0b00100000,
		0b00000000,
		0b00000000,
		0b00100000,
		0b00000000,
		0b00000000,
		//59 ;
		0b00000000,
		0b00000000,
		0b00100000,
		0b00000000,
		0b00100000,
		0b00100000,
		0b01000000,
		0b00000000,
		//60 <
		0b00000000,
		0b00011000,
		0b01100000,
		0b10000000,
		0b01100000,
		0b00011000,
		0b00000000,
		0b00000000,
		//61 =
		0b00000000,
		0b00000000,
		0b01111000,
		0b00000000,
		0b01111000,
		0b00000000,
		0b00000000,
		0b00000000,
		//62 >
		0b00000000,
		0b11000000,
		0b00110000,
		0b00001000,
		0b00110000,
		0b11000000,
		0b00000000,
		0b00000000,
		//63 ?
		0b01100000,
		0b10010000,
		0b00100000,
		0b00100000,
		0b00000000,
		0b00100000,
		0b00000000,
		0b00000000,
		//64 @
		0b01110000,
		0b10001000,
		0b10011000,
		0b10101000,
		0b10010000,
		0b10001000,
		0b01110000,
		0b00000000,
		//65 A
		0b00100000,
		0b01010000,
		0b10001000,
		0b11111000,
		0b10001000,
		0b10001000,
		0b00000000,
		0b00000000,
		//B
		0b11110000,
		0b10001000,
		0b11110000,
		0b10001000,
		0b10001000,
		0b11110000,
		0b00000000,
		0b00000000,
		//C
		0b01110000,
		0b10001000,
		0b10000000,
		0b10000000,
		0b10001000,
		0b01110000,
		0b00000000,
		0b00000000,
		//D
		0b11110000,
		0b10001000,
		0b10001000,
		0b10001000,
		0b10001000,
		0b11110000,
		0b00000000,
		0b00000000,
		//E
		0b11111000,
		0b10000000,
		0b11111000,
		0b10000000,
		0b10000000,
		0b11111000,
		0b00000000,
		0b00000000,
		//F
		0b11111000,
		0b10000000,
		0b11110000,
		0b10000000,
		0b10000000,
		0b10000000,
		0b00000000,
		0b00000000,
		//G
		0b01110000,
		0b10001000,
		0b10000000,
		0b10011000,
		0b10001000,
		0b01110000,
		0b00000000,
		0b00000000,
		//H
		0b10001000,
		0b10001000,
		0b11111000,
		0b10001000,
		0b10001000,
		0b10001000,
		0b00000000,
		0b00000000,
		//I
		0b01110000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b01110000,
		0b00000000,
		0b00000000,
		//J
		0b00111000,
		0b00010000,
		0b00010000,
		0b00010000,
		0b10010000,
		0b01100000,
		0b00000000,
		0b00000000,
		//K
		0b10001000,
		0b10010000,
		0b11100000,
		0b10100000,
		0b10010000,
		0b10001000,
		0b00000000,
		0b00000000,
		//L
		0b10000000,
		0b10000000,
		0b10000000,
		0b10000000,
		0b10000000,
		0b11111000,
		0b00000000,
		0b00000000,
		//M
		0b10001000,
		0b11011000,
		0b10101000,
		0b10101000,
		0b10001000,
		0b10001000,
		0b00000000,
		0b00000000,
		//N
		0b10001000,
		0b10001000,
		0b11001000,
		0b10101000,
		0b10011000,
		0b10001000,
		0b00000000,
		0b00000000,
		//O
		0b01110000,
		0b10001000,
		0b10001000,
		0b10001000,
		0b10001000,
		0b01110000,
		0b00000000,
		0b00000000,
		//P
		0b11110000,
		0b10001000,
		0b11110000,
		0b10000000,
		0b10000000,
		0b10000000,
		0b00000000,
		0b00000000,
		//Q
		0b01110000,
		0b10001000,
		0b10001000,
		0b10101000,
		0b10010000,
		0b01101000,
		0b00000000,
		0b00000000,
		//R
		0b11110000,
		0b10001000,
		0b11110000,
		0b10100000,
		0b10010000,
		0b10001000,
		0b00000000,
		0b00000000,
		//S
		0b01111000,
		0b10000000,
		0b01110000,
		0b00001000,
		0b00001000,
		0b11110000,
		0b00000000,
		0b00000000,
		//T
		0b11111000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b00000000,
		0b00000000,
		//U
		0b10001000,
		0b10001000,
		0b10001000,
		0b10001000,
		0b10001000,
		0b01110000,
		0b00000000,
		0b00000000,
		//V
		0b10001000,
		0b10001000,
		0b10001000,
		0b10001000,
		0b01010000,
		0b00100000,
		0b00000000,
		0b00000000,
		//W
		0b10001000,
		0b10001000,
		0b10101000,
		0b10101000,
		0b10101000,
		0b01010000,
		0b00000000,
		0b00000000,
		//X
		0b10001000,
		0b01010000,
		0b00100000,
		0b01010000,
		0b10001000,
		0b10001000,
		0b00000000,
		0b00000000,
		//Y
		0b10001000,
		0b10001000,
		0b01010000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b00000000,
		0b00000000,
		//Z
		0b11111000,
		0b00001000,
		0b00010000,
		0b00100000,
		0b01000000,
		0b11111000,
		0b00000000,
		0b00000000,
		//91 [
		0b11100000,
		0b10000000,
		0b10000000,
		0b10000000,
		0b10000000,
		0b11100000,
		0b00000000,
		0b00000000,
		//92 (backslash)
		0b00000000,
		0b10000000,
		0b01000000,
		0b00100000,
		0b00010000,
		0b00001000,
		0b00000000,
		0b00000000,
		//93 ]
		0b00111000,
		0b00001000,
		0b00001000,
		0b00001000,
		0b00001000,
		0b00111000,
		0b00000000,
		0b00000000,
		//94 ^
		0b00100000,
		0b01010000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		//95 _
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b11111000,
		0b00000000,
		//96 `
		0b10000000,
		0b01000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		//97 a
		0b00000000,
		0b01100000,
		0b00010000,
		0b01110000,
		0b10010000,
		0b01100000,
		0b00000000,
		0b00000000,
		//98 b
		0b10000000,
		0b10000000,
		0b11100000,
		0b10010000,
		0b10010000,
		0b11100000,
		0b00000000,
		0b00000000,
		//99 c
		0b00000000,
		0b00000000,
		0b01110000,
		0b10000000,
		0b10000000,
		0b01110000,
		0b00000000,
		0b00000000,
		// 100 d
		0b00010000,
		0b00010000,
		0b01110000,
		0b10010000,
		0b10010000,
		0b01110000,
		0b00000000,
		0b00000000,
		//101 e
		0b00000000,
		0b01100000,
		0b10010000,
		0b11110000,
		0b10000000,
		0b01110000,
		0b00000000,
		0b00000000,
		//102 f
		0b00110000,
		0b01000000,
		0b11100000,
		0b01000000,
		0b01000000,
		0b01000000,
		0b00000000,
		0b00000000,
		//103 g
		0b00000000,
		0b01100000,
		0b10010000,
		0b01110000,
		0b00010000,
		0b00010000,
		0b01100000,
		0b00000000,
		//104 h
		0b10000000,
		0b10000000,
		0b11100000,
		0b10010000,
		0b10010000,
		0b10010000,
		0b00000000,
		0b00000000,
		//105 i
		0b00100000,
		0b00000000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b01110000,
		0b00000000,
		0b00000000,
		//106 j
		0b00010000,
		0b00000000,
		0b00110000,
		0b00010000,
		0b00010000,
		0b00010000,
		0b01100000,
		0b00000000,
		//107 k
		0b10000000,
		0b10010000,
		0b10100000,
		0b11000000,
		0b10100000,
		0b10010000,
		0b00000000,
		0b00000000,
		//108 l
		0b01100000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b01110000,
		0b00000000,
		0b00000000,
		//109 m
		0b00000000,
		0b00000000,
		0b01010000,
		0b10101000,
		0b10101000,
		0b10101000,
		0b00000000,
		0b00000000,
		//110 n
		0b00000000,
		0b00000000,
		0b11110000,
		0b10001000,
		0b10001000,
		0b10001000,
		0b00000000,
		0b00000000,
		//111 o
		0b00000000,
		0b00000000,
		0b01100000,
		0b10010000,
		0b10010000,
		0b01100000,
		0b00000000,
		0b00000000,
		//112 p
		0b00000000,
		0b00000000,
		0b01100000,
		0b10010000,
		0b11110000,
		0b10000000,
		0b10000000,
		0b00000000,
		//113 q
		0b00000000,
		0b00000000,
		0b01100000,
		0b10010000,
		0b11110000,
		0b00010000,
		0b00010000,
		0b00000000,
		//114 r
		0b00000000,
		0b00000000,
		0b10110000,
		0b01001000,
		0b01000000,
		0b01000000,
		0b00000000,
		0b00000000,
		//115 s
		0b00000000,
		0b00110000,
		0b01000000,
		0b00100000,
		0b00010000,
		0b01100000,
		0b00000000,
		0b00000000,
		//116 t
		0b01000000,
		0b01000000,
		0b11100000,
		0b01000000,
		0b01000000,
		0b01000000,
		0b00000000,
		0b00000000,
		// 117u
		0b00000000,
		0b00000000,
		0b10010000,
		0b10010000,
		0b10010000,
		0b01100000,
		0b00000000,
		0b00000000,
		//118 v
		0b00000000,
		0b00000000,
		0b10001000,
		0b10001000,
		0b01010000,
		0b00100000,
		0b00000000,
		0b00000000,
		//119 w
		0b00000000,
		0b00000000,
		0b10001000,
		0b10101000,
		0b10101000,
		0b01010000,
		0b00000000,
		0b00000000,
		//120 x
		0b00000000,
		0b10001000,
		0b01010000,
		0b00100000,
		0b01010000,
		0b10001000,
		0b00000000,
		0b00000000,
		//121 y
		0b00000000,
		0b00000000,
		0b10010000,
		0b10010000,
		0b01100000,
		0b01000000,
		0b10000000,
		0b00000000,
		//122 z
		0b00000000,
		0b00000000,
		0b11110000,
		0b00100000,
		0b01000000,
		0b11110000,
		0b00000000,
		0b00000000,
		//123 {
		0b00100000,
		0b01000000,
		0b01000000,
		0b10000000,
		0b01000000,
		0b01000000,
		0b00100000,
		0b00000000,
		//124 |
		0b00100000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b00100000,
		0b00000000,
		//125 }
		0b00100000,
		0b00010000,
		0b00010000,
		0b00001000,
		0b00010000,
		0b00010000,
		0b00100000,
		0b00000000,
		//126 ~
		0b01000000,
		0b10101000,
		0b00010000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		//127 DEL
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000
};

Screen::Screen(QWidget *parent) :
	QWidget(parent),
	m_back(Black),
	m_fore(White),
	m_col(0),
	m_row(0)
{
	reset();

	setMinimumSize(cols * charWidth * scale, rows * charHeight * scale);
}

void Screen::setBack(const int &back)
{
	m_back = static_cast<Color>(back);
}

void Screen::setFore(const int &fore)
{
	m_fore = static_cast<Color>(fore);
}

void Screen::setCol(const int &col)
{
	m_col = col;
}

void Screen::setRow(const int &row)
{
	m_row = row;
}

void Screen::setChar(const char &ch)
{
	const int idx = m_row * cols + m_col;

	if(idx > m_buffer.size())
		return;

	if(ch == '\n') {
		m_col = 0;
		++m_row;

		return;
	}

	m_buffer[idx].fore = m_fore;
	m_buffer[idx].back = m_back;
	m_buffer[idx].ch = (ch < ' ' || ch > '~') ? ' ' : ch;

	if(m_col == cols) {
		++m_row;

		m_col = 0;
	}

	++m_col;

	update();
}

void Screen::reset()
{
	m_back = Black;
	m_fore = White;
	m_col = 0;
	m_row = 0;

	m_buffer.clear();
	for(int i = 0; i < cols * rows; ++i)
		m_buffer << Char(White, Black, ' ');

	update();
}

void Screen::paintEvent(QPaintEvent *event)
{
	QPainter painter(this);
	painter.setPen(Qt::transparent);

	for(int i = 0; i < m_buffer.size(); ++i) {
		const Char ch = m_buffer[i];

		const int x = i % cols;
		const int y = i / cols;

		const int start = (ch.ch - ' ') * charHeight;
		for(int h = 0; h < charHeight; ++h) {
			for(int w = 0; w < charWidth; ++w) {
				painter.setBrush(colorMap[(pixelFont[start + h] & (int)qPow(2.0, charWidth - w + 1)) ? ch.fore : ch.back]);
				painter.drawRect((x * charWidth + w) * scale, (y * charHeight + h) * scale, scale, scale);
			}
		}
	}
}
